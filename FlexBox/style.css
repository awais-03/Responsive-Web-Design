/* The CSS box-sizing property allows us to include the padding and border in an element's total width and height */
/* By default, the width and height of an element is calculated like this:
width + padding + border = actual width of an element
height + padding + border = actual height of an element */

/* This means: When you set the width/height of an element, the element often appears bigger than you have set (because the element's border and padding are added to the element's specified width/height). */

/* If you set box-sizing: border-box; on an element, padding and border are included in the width and height: */

* {
    padding: 0px;
    margin: 0px;
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: sans-serif;
    background-color:#f5f6f7;
}

.header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}
  
.gallery img {
    width: 100%;
    height: 300px;
    max-width: 350px;
}

/* Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container. */

/* Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:
row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top */

/* if we dont specify flex-wrap property, it will make horizontal scrollbar as the content will overflow the viewport */
/* The flex-wrap property determines how your flex items behave when the flex container is too small. Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed. */
.gallery {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap; /* no-wrap -> single-line, wrap -> multiline */

    /* The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them. */
    justify-content: center;

    /* The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical. To vertically center your images, give your .gallery selector an align-items property with center as the value. */
    align-items: center;
}

/* .gallery {
    width: 50%;
    border: 5px solid red;
}

img {
    width: 100%;
    padding: 5px;
    border: 5px solid blue;
} */

